using CatchUp2406.News.Application.Internal.CommandServices;
using CatchUp2406.News.Domain.Model.Queries;
using CatchUp2406.News.Domain.Services;
using CatchUp2406.News.Interfaces.REST.Resources;
using CatchUp2406.News.Interfaces.REST.Transform;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System.Net.Mime;

namespace CatchUp2406.News.Interfaces.REST
{
    [ApiController]
    [Route("api/v1/[controller]")]
    [Produces(MediaTypeNames.Application.Json)]
    [SwaggerTag("Available Category Endpoints")]
    public class FavoriteSourceController
        (IFavoriteSourceCommandService favoriteSourceCommandService,
        IFavoriteSourceQueryService favoriteSourceQueryService) :
        ControllerBase
    {

        /// <summary>
        /// Creates a favorite source. 
        /// </summary>
        /// <param name="resource">CreateFavoriteSourceResource resource</param>
        /// <returns>
        /// A response as an action result containing the created favorite source, or bad request if the favorite source was not created.
        /// </returns>
        [HttpPost]
        [SwaggerOperation(
            Summary = "Creates a favorite source XXXX",
            Description = "Creates a favorite source with a given News API Key and Source ID",
            OperationId = "CreateFavoriteSource")]
        [SwaggerResponse(201, "The favorite source was created", typeof(FavoriteSourceResource))]
        [SwaggerResponse(400, "The favorite source was not created")]
        public async Task<ActionResult> CreateFavoriteSource([FromBody] CreateFavoriteSourceResource resource)
        {
            var createFavoriteSourceCommand = CreateFavoriteSourceCommandFromResourceAssembler.ToCommandFromResource(resource);
            var result = await favoriteSourceCommandService.Handle(createFavoriteSourceCommand);
            if (result is null) return BadRequest();                                                                                
            return CreatedAtAction("nameof(GetFavoriteSourceById)", new { id = result.Id }, FavoriteSourceResourceFromEntityAssembler.ToResourceFromEntity(result));
        }



        /// <summary>
        /// Gets all favorite sources by news API key. 
        /// </summary>
        /// <param name="newsApiKey">The News API Key generated by the service provider</param>
        /// <returns>
        /// A response as an action result containing the favorite sources, or not found if no favorite sources were found.
        /// </returns>
        [HttpGet("{newsApiKey}")]
        [SwaggerOperation(
        Summary = "Gets a favorite source by news api key",
        Description = "Gets a favorite source by newsapikey",
        OperationId = "GetAllFavoriteSourcesByNewsApiKey")]
        [SwaggerResponse(200, "Result(s) was/were found", typeof(FavoriteSourceResource))]
        public async Task<ActionResult> GetAllFavoriteSourcesByNewsApiKey(string newsApiKey)
        {
            var getAllFavoriteSourcesByNewsApiKeyQuery = new GetAllFavoriteSourcesByNewsApiKeyQuery(newsApiKey);
            var result = await favoriteSourceQueryService.Handle(getAllFavoriteSourcesByNewsApiKeyQuery);
            var resources = result.Select(FavoriteSourceResourceFromEntityAssembler.ToResourceFromEntity);
            return Ok(resources);
        }

        [HttpGet("{id}")]
        [SwaggerOperation(
        Summary = "Gets a favorite source by id",
        Description = "Gets a favorite source by id",
        OperationId = "GetFavoriteSourcesById")]
        [SwaggerResponse(200, "Result(s) was/were found", typeof(FavoriteSourceResource))]
        public async Task<ActionResult> GetFavoriteSourcesById(string id)
        {
            var getFavoriteSourcesByIdQuery = new GetFavoriteSourcesByIdQuery(id);
            var result = await favoriteSourceQueryService.Handle(getFavoriteSourcesByIdQuery);
            var resources = FavoriteSourceResourceFromEntityAssembler.ToResourceFromEntity(result);
            return Ok(resources);
        }
        
        [HttpGet]
        [SwaggerOperation(
        Summary = "Gets a favorite source by id and new api key",
        Description = "Gets a favorite source by id and new api key",
        OperationId = "GetFavoriteSourceFromQuery")]
        [SwaggerResponse(200, "Result(s) was/were found", typeof(FavoriteSourceResource))]
        public async Task<ActionResult> GetFavoriteSourceFromQuery([FromQuery] string newsApiKey, [FromQuery] string sourceId = "")
        {
             return string.IsNullOrEmpty(sourceId)
                ? await GetAllFavoriteSourcesByNewsApiKey(newsApiKey)
                : await GetFavoriteSourceByNewsApiKeyAndSourceId(newsApiKey, sourceId); ;
        }
        private async Task<ActionResult> GetFavoriteSourceByNewsApiKeyAndSourceId(string newsApiKey, string sourceId)
        {
            var getFavoriteSourceByNewsApiKeyAndSourceIdQuery = new GetFavoriteSourceByNewsApiKeyAndSourceIdQuery(newsApiKey, sourceId);

            var result = await favoriteSourceQueryService.Handle(getFavoriteSourceByNewsApiKeyAndSourceIdQuery);
            var resources = FavoriteSourceResourceFromEntityAssembler.ToResourceFromEntity(result);
            return Ok(resources);
        }
        
    }
}
